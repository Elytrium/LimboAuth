//file:noinspection DependencyNotationArgument
//file:noinspection VulnerableLibrariesLocal

plugins() {
  id("java")
  alias(libs.plugins.grgit)

  id("checkstyle")
  alias(libs.plugins.spotbugs)
  alias(libs.plugins.licenser)

  id("maven-publish")

  alias(libs.plugins.buildconfig)
}

this.group = "net.elytrium"
this.version = "2.0.0-SNAPSHOT"

if (this.version.endsWith("-SNAPSHOT")) {
  this.version += " (${grgit.head().abbreviatedId})"
}

compileJava() {
  sourceCompatibility = JavaVersion.VERSION_16
  targetCompatibility = JavaVersion.VERSION_16
  options.getRelease().set(11)

  options.setEncoding("UTF-8")
}

configurations() {
  implementation.extendsFrom(common, h2v1, h2, sqlite, mysql, mariadb, postgresql, compile/*workaround for the old buildconfig plugin (iâ€™d rather use a 10-year-old plugin written in groovy than in kotlin)*/)
}

repositories() {
  mavenCentral()

  maven {
    name = "elytrium"
    url = "https://maven.elytrium.net/repo/"
  }

  maven {
    name = "papermc"
    url = "https://repo.papermc.io/repository/maven-public/"
  }
  maven {
    name = "opencollab"
    url = "https://repo.opencollab.dev/maven-snapshots/"
  }
}

dependencies() {
  annotationProcessor(libs.bundles.jabel)

  annotationProcessor(libs.velocity.api)
  compileOnly(libs.bundles.velocity)
  compileOnly(libs.bundles.netty)
  compileOnly(libs.asynchttpclient)

  compileOnly(libs.limboapi) {
    exclude(module: "config") // TODO remove
  }
  compileOnly(libs.floodgate.api) {
    exclude(module: "cumulus")
  }

  common(libs.bundles.common) {
    exclude(module: "slf4j-api")
  }

  h2v1(libs.h2v1)
  h2(libs.h2)
  sqlite(libs.sqlite) {
    exclude(module: "slf4j-api")
  }
  mysql(libs.bundles.mysql)
  mariadb(libs.bundles.mariadb) {
    exclude(group: "org.slf4j")
    exclude(module: "caffeine")
    exclude(module: "checker-qual")
  }
  postgresql(libs.bundles.postgresql) {
    exclude(group: "org.slf4j")
    exclude(module: "caffeine")
    exclude(module: "checker-qual")
  }
}

checkstyle() {
  toolVersion = libs.versions.checkstyle.get()

  configFile = file("$rootDir/.config/checkstyle/checkstyle.xml")
  configProperties = ["configDirectory": "$rootDir/.config/checkstyle"]
  maxErrors = 0
  maxWarnings = 0
}

spotbugsMain() {
  excludeFilter.set(file("$rootDir/.config/spotbugs/suppressions.xml"))
  reports.register("html") {
    required = true
    outputLocation.value(layout.buildDirectory.file("reports/spotbugs/main/spotbugs.html"))
    stylesheet = "fancy-hist.xsl"
  }
}

license() {
  header = file("$rootDir/HEADER.txt")

  exclude("**/BuildConfig.java")
}

tasks.register("sourcesJar", Jar) {
  archiveClassifier = "sources"
  from(sourceSets.main.getAllSource())
}

tasks.register("javadocJar", Jar) {
  archiveClassifier = "javadoc"
  from(javadoc)
}

javadoc() {
  options.encoding("UTF-8")
  options.source("16")
  options.links("https://docs.oracle.com/en/java/javase/11/docs/api/")
  options.addStringOption("Xdoclint:none", "-quiet")
  if (JavaVersion.current() >= JavaVersion.VERSION_1_9 && JavaVersion.current() < JavaVersion.VERSION_12) {
    options.addBooleanOption("-no-module-directories", true)
  }
}

artifacts() {
  archives(sourcesJar)
  archives(javadocJar)
  archives(jar)
}

publishing() {
  repositories() {
    maven() {
      credentials() {
        username = System.getenv("ELYTRIUM_MAVEN_USERNAME")
        password = System.getenv("ELYTRIUM_MAVEN_PASSWORD")
      }

      name = "elytrium"
      url = "https://maven.elytrium.net/repo/"
    }
  }

  publications.create("publication", MavenPublication) {
    artifact(sourcesJar)
    artifact(javadocJar)
    artifact(jar)
  }
}

buildConfig() {
  packageName("${this.group}.${this.name}")

  // Omit the NAME field using a little bit... extravagant way
  buildConfigField("java.lang.String", "VERSION", "\"${this.version}\"/*")
  buildConfigField("Object", "NAME", "null*/")

  buildConfigField("String[]", "REPOSITORIES", () -> "new String[] { \"${this.repositories.collect(repository -> repository.getProperties().get("url")).join("\", \"")}\" }")

  buildConfigField("String[]", "COMMON", resolvedArtifacts(configurations.common))

  buildConfigField("String[]", "H2V1", resolvedArtifacts(configurations.h2v1))
  buildConfigField("String[]", "H2", resolvedArtifacts(configurations.h2))
  buildConfigField("String[]", "SQLITE", resolvedArtifacts(configurations.sqlite))
  buildConfigField("String[]", "MYSQL", resolvedArtifacts(configurations.mysql))
  buildConfigField("String[]", "MARIADB", resolvedArtifacts(configurations.mariadb))
  buildConfigField("String[]", "POSTGRESQL", resolvedArtifacts(configurations.postgresql))
}

static Closure<String> resolvedArtifacts(Configuration configuration) {
  return () -> "new String[] { \"" + configuration.getResolvedConfiguration().getResolvedArtifacts().collect(
      artifact -> "${artifact.moduleVersion.id.group.replace('.', '/')}/${artifact.name}/${artifact.moduleVersion.id.version}/${artifact.file.name}"
  ).join("\", \"") + "\" }"
}
