//file:noinspection VulnerableLibrariesLocal

plugins() {
  id("java")

  id("org.ajoberstar.grgit").version("5.2.0")

  id("checkstyle")
  id("com.github.spotbugs").version("5.0.14")
  id("org.cadixdev.licenser").version("0.6.1")

  id("maven-publish")

  id("com.github.gmazzo.buildconfig").version("4.1.2") // kotlin :skull:
}

this.group = "net.elytrium"
this.version = "2.0.0-SNAPSHOT"

if (this.version.endsWith("-SNAPSHOT")) {
  this.version += " (${grgit.head().abbreviatedId})"
}

compileJava() {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  options.getRelease().set(11)

  options.setEncoding("UTF-8")
}

configurations() {
  implementation.extendsFrom(common, totp, bcrypt, argon2, siphash)
}

repositories() {
  mavenCentral()

  maven {
    name = "elytrium-repo"
    url = "https://maven.elytrium.net/repo/"
  }

  maven {
    name = "papermc-repo"
    url = "https://repo.papermc.io/repository/maven-public/"
  }
  maven {
    name = "opencollab-snapshot"
    url = "https://repo.opencollab.dev/maven-snapshots/"
  }
}

dependencies() {
  annotationProcessor("net.java.dev.jna:jna-platform:5.13.0")
  annotationProcessor("com.github.bsideup.jabel:jabel-javac-plugin:1.0.0")

  compileOnly("com.velocitypowered:velocity-api:$velocityVersion")
  annotationProcessor("com.velocitypowered:velocity-api:$velocityVersion")
  compileOnly("com.velocitypowered:velocity-proxy:$velocityVersion") // From Elytrium Repo.

  compileOnly("io.netty:netty-codec:$nettyVersion")
  compileOnly("io.netty:netty-handler:$nettyVersion")

  compileOnly("org.asynchttpclient:async-http-client:2.12.3")

  compileOnly("org.geysermc.floodgate:api:$floodgateVersion") {
    exclude(module: "cumulus")
  }

  compileOnly("net.elytrium.limboapi:api:$limboapiVersion") {
    exclude(module: "config") // TODO remove
  }
  compileOnly("net.elytrium.commons:utils:$elytriumCommonsVersion")
  compileOnly("net.elytrium.commons:velocity:$elytriumCommonsVersion")
  compileOnly("net.elytrium.commons:kyori:$elytriumCommonsVersion")
  common("net.elytrium:serializer:$elytriumSerializerVersion")

  common("it.unimi.dsi:fastutil-core:$fastutilVersion")

  common("com.zaxxer:HikariCP:5.0.1") {
    exclude(module: "slf4j-api")
  }
  common("org.jooq:jooq:3.18.6")
  common("org.reactivestreams:reactive-streams:1.0.4") // Updated dependency of dependency

  common("org.bstats:bstats-velocity:$bstatsVersion")

  totp("dev.samstevens.totp:totp:1.7.1") {
    exclude(group: "com.google.zxing")
  }
  totp("commons-codec:commons-codec:1.16.0") // Updated dependency

  bcrypt("at.favre.lib:bcrypt:0.10.2")
  argon2("de.mkammerer:argon2-jvm:2.11")
  argon2("net.java.dev.jna:jna:5.13.0") // Updated dependency
  siphash("io.whitfin:siphash:2.0.0")

  compileOnly("com.github.spotbugs:spotbugs-annotations:$spotbugsVersion")
}

checkstyle() {
  toolVersion = "10.12.1"

  configFile = file("$rootDir/.config/checkstyle/checkstyle.xml")
  configProperties = ["configDirectory": "$rootDir/.config/checkstyle"]
  maxErrors = 0
  maxWarnings = 0
}

spotbugsMain() {
  excludeFilter.set(file("$rootDir/.config/spotbugs/suppressions.xml"))
  reports.register("html") {
    required = true
    outputLocation.value(layout.buildDirectory.file("reports/spotbugs/main/spotbugs.html"))
    stylesheet = "fancy-hist.xsl"
  }
}

license() {
  header = file("$rootDir/HEADER.txt")

  exclude("**/BuildConfig.java")
}

tasks.register("sourcesJar", Jar) {
  archiveClassifier = "sources"
  from(sourceSets.main.getAllSource())
}

tasks.register("javadocJar", Jar) {
  archiveClassifier = "javadoc"
  from(javadoc)
}

javadoc() {
  options.setEncoding("UTF-8")
  options.setSource("17")
  options.links("https://docs.oracle.com/en/java/javase/17/docs/api/")
  options.addStringOption("Xdoclint:none", "-quiet")
  if (JavaVersion.current() >= JavaVersion.VERSION_1_9 && JavaVersion.current() < JavaVersion.VERSION_12) {
    options.addBooleanOption("-no-module-directories", true)
  }
}

artifacts() {
  archives(sourcesJar)
  archives(javadocJar)
  archives(jar)
}

publishing() {
  repositories() {
    maven() {
      credentials() {
        username = System.getenv("ELYTRIUM_MAVEN_USERNAME")
        password = System.getenv("ELYTRIUM_MAVEN_PASSWORD")
      }

      name = "elytrium-repo"
      url = "https://maven.elytrium.net/repo/"
    }
  }

  publications.create("publication", MavenPublication) {
    artifact(sourcesJar)
    artifact(javadocJar)
    artifact(jar)
  }
}

buildConfig() {
  packageName("net.elytrium.limboauth")

  buildConfigField("String", "VERSION", "\"$version\"")

  Closure<String> formatConfiguration = configuration -> {
    "new String[] { \"" + configuration.collect(file -> {
      def matcher = (~".*[\\\\/](.*)[\\\\/](.*)[\\\\/](.*)[\\\\/].*[\\\\/](.*\\.jar)").matcher(file.getAbsolutePath())
      matcher.find()
      "${matcher.group(1).replace('.', '/')}/${matcher.group(2)}/${matcher.group(3)}/${matcher.group(4)}"
    }).join("\", \"")+ "\" }"
  }
  buildConfigField("String[]", "COMMON_DEPENDENCIES", formatConfiguration(configurations.common))
  buildConfigField("String[]", "TOTP_DEPENDENCIES", formatConfiguration(configurations.totp))
  buildConfigField("String[]", "BCRYPT_DEPENDENCIES", formatConfiguration(configurations.bcrypt))
  buildConfigField("String[]", "ARGON2_DEPENDENCIES", formatConfiguration(configurations.argon2))
  buildConfigField("String[]", "SIPHASH_DEPENDENCIES", formatConfiguration(configurations.siphash))
}
