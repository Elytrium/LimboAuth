//file:noinspection VulnerableLibrariesLocal

plugins() {
  alias(libs.plugins.grgit)

  alias(libs.plugins.spotless).apply(false)
  alias(libs.plugins.spotbugs).apply(false)
}

this.group = "net.elytrium"
this.version = "2.0.0-SNAPSHOT"

if (this.version.endsWith("-SNAPSHOT")) {
  this.version += " (${grgit.head().abbreviatedId})"
}

allprojects() {
  apply(plugin: "java-library")

  apply(plugin: libs.plugins.spotless.get().getPluginId())
  apply(plugin: "checkstyle")
  apply(plugin: libs.plugins.spotbugs.get().getPluginId())

  tasks.withType(JavaCompile).configureEach() {
    options.setEncoding("UTF-8")
  }

  java() {
    toolchain.setLanguageVersion(JavaLanguageVersion.of(17))
  }

  repositories() {
    mavenCentral()

    maven() {
      name = "elytrium"
      url = "https://maven.elytrium.net/repo/"
    }

    maven() {
      name = "papermc"
      url = "https://repo.papermc.io/repository/maven-public/"
    }
  }

  dependencies() {
    api(libs.velocity.api)
  }

  spotless() {
    java() {
      licenseHeaderFile(rootProject.file("HEADER.txt"))
    }
  }

  checkstyle() {
    toolVersion = libs.versions.checkstyle.get()

    configFile = rootProject.file(".config/checkstyle/checkstyle.xml")
    maxErrors = 0
    maxWarnings = 0
  }

  spotbugsMain() {
    excludeFilter.set(rootProject.file(".config/spotbugs/suppressions.xml"))
    reports() {
      html() {
        required = true
        outputLocation.value(layout.buildDirectory.file("reports/spotbugs/spotbugs.html"))
        stylesheet = "fancy-hist.xsl"
      }
    }
  }
}

dependencies() {
  annotationProcessor(libs.velocity.api)

  compileOnly(project(":plugin")) // BuildConfig.VERSION
}

jar() {
  project(":api") {
    from(sourceSets.main.output)
  }

  from(project(":plugin").tasks.jar)
}
